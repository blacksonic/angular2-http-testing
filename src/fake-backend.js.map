{"version":3,"file":"fake-backend.js","sourceRoot":"","sources":["fake-backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { MockBackend, MockConnection } from '@angular/http/testing';\nimport { Http, BaseRequestOptions, RequestMethod, Headers } from '@angular/http';\nimport { Provider } from '@angular/core';\nimport { BackendExpectation, BackendExpectationOptions } from './backend-expectation';\n\nexport class FakeBackend extends MockBackend {\n  private _connections: MockConnection[] = [];\n  private _expectations: BackendExpectation[] = [];\n  autoRespond = true;\n\n  static getProviders(): Provider[] {\n    return [\n      FakeBackend,\n      BaseRequestOptions,\n      {\n        provide: Http,\n        useFactory: (backend: FakeBackend, defaultOptions: BaseRequestOptions) => {\n          return new Http(backend, defaultOptions);\n        },\n        deps: [FakeBackend, BaseRequestOptions]\n      }\n    ];\n  }\n\n  constructor() {\n    super();\n\n    this.connections.subscribe((connection: MockConnection) => {\n      this._connections.push(connection);\n\n      if (this.autoRespond) {\n        this._verifyExpectation(this._connections.length - 1);\n      }\n    });\n  }\n\n  setAutoRespond(autoRespond: boolean) {\n    this.autoRespond = autoRespond;\n  }\n\n  expect(method: RequestMethod, url: string, body?: string | Object, headers?: Headers | { [name: string]: any; }) {\n    return this._addExpectation({\n      url,\n      method,\n      body,\n      headers: new Headers(headers)\n    });\n  }\n\n  expectGET(url: string, headers?: Headers | { [name: string]: any; }) {\n    return this._addExpectation({\n      url,\n      method: RequestMethod.Get,\n      headers: new Headers(headers)\n    });\n  }\n\n  expectPost(url: string, body?: string | Object, headers?: Headers | { [name: string]: any; }) {\n    return this._addExpectation({\n      url,\n      method: RequestMethod.Post,\n      body,\n      headers: new Headers(headers)\n    });\n  }\n\n  expectPut(url: string, body?: string | Object, headers?: Headers | { [name: string]: any; }) {\n    return this._addExpectation({\n      url,\n      method: RequestMethod.Put,\n      body,\n      headers: new Headers(headers)\n    });\n  }\n\n  expectDelete(url: string, body?: string | Object, headers?: Headers | { [name: string]: any; }) {\n    return this._addExpectation({\n      url,\n      method: RequestMethod.Delete,\n      body,\n      headers: new Headers(headers)\n    });\n  }\n\n  flush() {\n    this._connections.forEach((connection, order) => {\n      this._verifyExpectation(order);\n    });\n  }\n\n  private _addExpectation(options: BackendExpectationOptions) {\n    let expectation = new BackendExpectation(options);\n    this._expectations.push(expectation);\n    return expectation;\n  }\n\n  private _verifyExpectation(order: number) {\n    this._expectations[order].verify(\n      this._connections[order]\n    );\n  }\n}\n"]}