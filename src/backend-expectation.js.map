{"version":3,"file":"backend-expectation.js","sourceRoot":"","sources":["backend-expectation.ts"],"names":[],"mappings":"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","sourcesContent":["import { MockConnection } from '@angular/http/testing';\nimport { Response, ResponseOptions, RequestMethod, Headers } from '@angular/http';\n\nexport interface BackendExpectationOptions {\n  url: string | RegExp;\n  method: RequestMethod;\n  headers: Headers;\n  body?: string | Object;\n}\n\nfunction stringifyBody(body: string | Object) {\n  return typeof body === 'string'\n    ? body\n    : JSON.stringify(body, null, 2);\n}\n\nexport class BackendExpectation {\n  private _isVerified = false;\n  private _responseOptions?: ResponseOptions;\n  private _responseError?: Error;\n\n  public constructor(private options: BackendExpectationOptions) {}\n\n  public getIsVerified() {\n    return this._isVerified;\n  }\n\n  public respond(body: string | Object, status: number = 200, headers?: Headers | { [name: string]: any; }) {\n    this._responseOptions = new ResponseOptions({ status, body, headers: new Headers(headers) });\n  }\n\n  public respondWithError(error: string | Error) {\n    this._responseError = typeof error === 'string' ? new Error(error) : error;\n  }\n\n  public verify(connection: MockConnection) {\n    this._isVerified = true;\n    this._verifyConnection(connection);\n    this._respond(connection);\n  }\n\n  private _verifyConnection(connection: MockConnection) {\n    if (typeof this.options.url === 'string') {\n      expect(connection.request.url).toEqual(this.options.url, 'Request url mismatch.');\n    } else {\n      expect(connection.request.url).toMatch(this.options.url, 'Request url mismatch.');\n    }\n    expect(connection.request.method).toEqual(this.options.method, 'Request method mismatch.');\n\n    if (this.options.body) {\n      expect(connection.request.getBody()).toEqual(stringifyBody(this.options.body), 'Request body mismatch.');\n    }\n\n    this.options.headers.forEach((values, name) => {\n      expect(connection.request.headers.get(name)).toEqual(this.options.headers.get(name), 'Request header mismatch.');\n    });\n  }\n\n  private _respond(connection: MockConnection) {\n    if (this._responseError) {\n      return connection.mockError(this._responseError);\n    }\n\n    if (!this._responseOptions) {\n      let responseOptions = new ResponseOptions({ status: 200, body: '' });\n      return connection.mockRespond(new Response(responseOptions));\n    }\n\n    connection.mockRespond(new Response(this._responseOptions));\n  }\n}\n"]}